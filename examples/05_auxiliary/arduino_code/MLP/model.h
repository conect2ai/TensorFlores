namespace Conect2AI
{
    namespace TensorFlores
    {
        class MultilayerPerceptron
        {
        public:
            float *predict(float *x)
            {
                float *y_pred = new float[1];
                static const float w1[3][16] = {
                    {-0.0005772341026594916, -0.5119157914591745, -1.3189779787766966, -1.9037018013659437, 1.1653238877453183, 0.6979194232837418, -0.4947619250545843, 0.5596694645277294, 0.017927842179126293, 0.4258959180168385, -0.7844215229879007, -0.6032661853253871, 1.0562813891255107, -0.9984179598545366, -0.4751303435229142, 0.30954778709071823},
                    {-1.8279283822629908, -0.8736809736211831, 0.26488414978405633, -0.18527473295441668, -0.28297667843023394, 0.30667821875944506, 1.7694933626794898, 1.917080727870769, 0.04506059801060034, -0.5984374585251195, 0.9413366064050688, -1.5926025821478966, 0.9144431819871668, 0.49239482384405703, -0.893092057504579, -0.012206797064560581},
                    {0.7425815991919884, -1.6716265349098656, 1.149758634153701, 0.7572064233801535, 0.5101984546976129, 0.9350229652509853, -0.14785418739735823, 0.9115574451194322, -1.0077742176922464, 1.0212925340786847, -1.7289972108687062, -1.8219652342999526, 0.6934521485723432, 0.2216805766039028, 0.522452867883147, -0.0031124701440302972}};

                static const float b1[16] = {-0.014468796308583774, -0.007894700256005908, 0.004742340228037998, -0.029500025371885723, 0.0065770132962566456, 0.007235204446614891, 0.008429315800174303, 0.001651943874475291, 0.00136533295452693, 0.01758252683276665, 0.01089041608663218, 0.0066138805244737794, -0.003297718943243218, 0.005639516908862597, -0.026729979457111197, 0.0008857307719286624};

                static const float w2[16][8] = {
                    {0.9900541727135794, -0.22115578080593534, 0.2216309120392799, 0.2893757924124589, -2.486409147575042, 1.184278309915316, 0.5325504945790327, 0.8926975487503364},
                    {-0.07695173171945717, -0.07590496195835145, 0.2675905815274325, -0.7345640615013286, 0.839636596142557, -0.10775405594471543, 1.7163093777479717, 1.2319695993781938},
                    {-0.46067059484986206, 0.3552685605290544, 0.6152163144257207, -0.6746284892584914, -1.3489862431196886, 0.5562379002817389, -1.825756798047379, -1.1812023411912322},
                    {-0.44935441331627624, 0.32657207566670987, -1.7843308879331492, 0.5689766480475971, 0.37603272833989937, 1.6026569535004693, 0.004533157600761724, 0.31906135581961065},
                    {1.187947780844678, 0.4083401725891803, 0.9081407534051565, 0.3371534868075329, 0.4421646823067646, 2.8262630677115648, 0.28602824664118104, 1.026970198187473},
                    {-0.1479900613116198, 0.7191402098201138, -0.5266446981830658, 0.5838574042651968, -0.18912379457790715, -0.8252751026671842, 0.4578700361076384, -0.4229679993692256},
                    {-0.33622541488085533, -0.022443280132819744, 0.3757516476643839, 1.1880420229816868, -0.7097223465051247, -2.3627282753675396, -0.6687315085450342, -0.20088366072437566},
                    {0.7100646107173797, 0.8993971600225011, -0.8110799538125086, -0.47963805143975385, 0.6645606757659784, 1.7123386557851603, 0.02903509433864234, 1.2254918361185954},
                    {-0.3413559627666162, -0.7804299931165624, 0.7173227214638568, 0.24195967677344016, -0.2622178496600062, 0.7058193600511099, -0.6274524293880791, 0.030940266041967535},
                    {0.7847352601494605, -0.8629680063523931, -0.4238721714773232, 0.8221650525874996, 1.1028266333765573, -1.2422021014532685, 0.8728604405118087, 0.3124986442552178},
                    {0.8155556661717894, -1.3061114050386007, -0.1991656115557133, -0.32122374023718564, -0.4601707053902892, 0.5241451493586037, -0.3062229527159322, -1.7597927635311772},
                    {3.4116644580675497, -0.9732066334091534, -0.608529638068942, -0.06250319957168426, 0.7286846594681867, 0.5005761457129444, -1.255164098587257, -1.911331264824869},
                    {-0.6094188328609585, 0.9263591453830009, -2.508543638813721, -0.1360983680092728, -0.1849146243353808, -2.238790240037516, -1.8065263835760768, 0.2698102058819025},
                    {-0.6249927294352761, -1.289888984679902, -0.6689918748203691, 0.3267171813187964, 1.205173500565362, 0.8657645777429495, 0.21178125268100442, -0.8485175762904872},
                    {-0.040130057775021995, -1.467788233499814, 0.33354807248520746, 0.7712588989563101, -0.8391269473355001, -2.1771262499430595, 1.1712012058011103, 0.018604505846696578},
                    {-0.40874507054382, -0.6172831021494571, -1.0045928578633065, 0.9831706221566577, -0.8820023022104396, 0.7164027354124662, -1.3867960158649908, -1.3944032344166402}};

                static const float b2[8] = {0.007676352695969973, 0.00202946384259336, -4.8300195660654035e-05, 0.0016318237834436636, 0.00765028171434756, -0.0020728470524858183, -0.004126515059292805, 0.00021194793006072617};

                static const float w3[8][1] = {
                    {0.4640739561157186},
                    {0.38500981901617815},
                    {-0.858358988057769},
                    {-2.9839453135012084},
                    {-0.8493921705355871},
                    {1.1346376855053604},
                    {-0.8470201761900871},
                    {0.7654822357752209}};

                static const float b3[1] = {-0.01844053522569908};

                // Input Layer
                float z1[16];
                for (int i = 0; i < 16; i++)
                {
                    z1[i] = b1[i];
                    for (int j = 0; j < 3; j++)
                    {
                        z1[i] += x[j] * w1[j][i];
                    }
                    z1[i] = relu(z1[i]);
                }

                // Hidden Layers
                float z2[8];
                for (int i = 0; i < 8; i++)
                {
                    z2[i] = b2[i];
                    for (int j = 0; j < 16; j++)
                    {
                        z2[i] += z1[j] * w2[j][i];
                    }
                    z2[i] = relu(z2[i]);
                }

                // Output Layer
                float z3[1];
                for (int k = 0; k < 1; k++)
                {
                    z3[k] = b3[k];
                    for (int j = 0; j < 8; j++)
                    {
                        z3[k] += z2[j] * w3[j][k];
                    }
                    y_pred[k] = linear(z3[k]);
                }

                return y_pred;
            }
            void free_prediction(float *prediction)
            {
                delete[] prediction;
            }

        protected:
            float linear(float x)
            {
                return x;
            };

            float relu(float x)
            {
                return x > 0 ? x : 0;
            };
        };
    }
}
